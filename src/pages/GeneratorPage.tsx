import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  ArrowRight, 
  ArrowLeft, 
  Sparkles, 
  Download, 
  Copy, 
  RefreshCw,
  Building2,
  Package,
  Target,
  Palette,
  Loader2,
  BarChart3,
  TrendingUp,
  Eye
} from 'lucide-react';
import toast from 'react-hot-toast';
import { generateCompleteAd, type AdGenerationParams, type GeneratedAd } from '../lib/api';
import { trackUserAction, trackRegeneration, trackDownload } from '../lib/analytics';

const GeneratorPage = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedAd, setGeneratedAd] = useState<GeneratedAd | null>(null);
  const [formData, setFormData] = useState<AdGenerationParams>({
    businessName: '',
    businessType: '',
    productName: '',
    productDescription: '',
    targetAudience: '',
    platform: '',
    tone: '',
    additionalInfo: ''
  });

  const totalSteps = 4;

  const businessTypes = [
    'E-commerce', 'SaaS', 'Restaurant', 'Fitness', 'Education', 
    'Healthcare', 'Real Estate', 'Finance', 'Travel', 'Other'
  ];

  const platforms = [
    { name: 'Instagram', color: 'from-pink-500 to-purple-500' },
    { name: 'Facebook', color: 'from-blue-500 to-blue-600' },
    { name: 'LinkedIn', color: 'from-blue-600 to-blue-700' },
    { name: 'Twitter', color: 'from-sky-400 to-sky-500' },
    { name: 'Google Ads', color: 'from-green-500 to-green-600' },
    { name: 'TikTok', color: 'from-black to-gray-800' }
  ];

  const tones = [
    { name: 'Professional', desc: 'Formal and authoritative' },
    { name: 'Friendly', desc: 'Warm and approachable' },
    { name: 'Exciting', desc: 'Energetic and dynamic' },
    { name: 'Luxury', desc: 'Premium and sophisticated' },
    { name: 'Playful', desc: 'Fun and creative' },
    { name: 'Urgent', desc: 'Time-sensitive and compelling' }
  ];

  const handleInputChange = (field: keyof AdGenerationParams, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    trackUserAction('form_field_updated', { field, step: currentStep });
  };

  const nextStep = () => {
    if (currentStep < totalSteps) {
      setCurrentStep(currentStep + 1);
      trackUserAction('generator_step_advanced', { from: currentStep, to: currentStep + 1 });
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
      trackUserAction('generator_step_back', { from: currentStep, to: currentStep - 1 });
    }
  };

  const generateAd = async () => {
    // Validate required fields
    const requiredFields = ['businessName', 'productName', 'targetAudience', 'platform', 'tone'];
    const missingFields = requiredFields.filter(field => !formData[field as keyof AdGenerationParams]);
    
    if (missingFields.length > 0) {
      toast.error(`Please fill in: ${missingFields.join(', ')}`);
      return;
    }

    setIsGenerating(true);
    trackUserAction('ad_generation_started', formData);
    
    try {
      const result = await generateCompleteAd(formData);
      setGeneratedAd(result);
    } catch (error) {
      console.error('Generation failed:', error);
      toast.error('Failed to generate ad. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  const copyToClipboard = (text: string, type: string) => {
    navigator.clipboard.writeText(text);
    toast.success(`${type} copied to clipboard!`);
    trackUserAction('content_copied', { type, length: text.length });
  };

  const regenerateAd = async () => {
    trackRegeneration('both', 'user_requested');
    setGeneratedAd(null);
    await generateAd();
  };

  const downloadAssets = () => {
    if (!generatedAd) return;
    
    // Create downloadable content
    const content = `
AD CONTENT FOR ${formData.businessName}
Generated by easyAD.ai

HEADLINE: ${generatedAd.headline}

COPY: ${generatedAd.copy}

CALL TO ACTION: ${generatedAd.cta}

STRATEGY: ${generatedAd.strategy}

KEYWORDS: ${generatedAd.keywords.join(', ')}

PLATFORM: ${formData.platform}
TONE: ${formData.tone}
TARGET AUDIENCE: ${formData.targetAudience}

IMAGE URL: ${generatedAd.imageUrl}

PERFORMANCE INSIGHTS:
- Predicted Engagement: ${generatedAd.insights.engagement}
- Expected CTR: ${generatedAd.insights.clickRate}
- Trending Keywords: ${generatedAd.insights.trending.join(', ')}

Generated on: ${new Date().toLocaleString()}
    `.trim();

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${formData.businessName}_ad_${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    trackDownload('full_ad', 'txt');
    toast.success('Ad content downloaded!');
  };

  // Results view
  if (generatedAd) {
    return (
      <div className="min-h-screen pt-20 pb-12">
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-center mb-12"
          >
            <h1 className="text-4xl md:text-5xl font-display font-bold mb-4 bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
              Your AI-Generated Ad
            </h1>
            <p className="text-xl text-gray-400">
              Ready to launch your campaign • Generated in {(generatedAd.generationTime / 1000).toFixed(1)}s
            </p>
          </motion.div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Ad Preview */}
            <motion.div
              initial={{ opacity: 0, x: -50 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.2 }}
              className="space-y-6"
            >
              {/* Main Ad Preview */}
              <div className="bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-sm border border-white/20 rounded-2xl p-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-primary-500">Ad Preview</h3>
                  <div className="flex items-center space-x-2 text-sm text-gray-400">
                    <Eye className="h-4 w-4" />
                    <span>{formData.platform}</span>
                  </div>
                </div>
                
                <div className="bg-white rounded-lg p-4 text-black">
                  <img 
                    src={generatedAd.imageUrl} 
                    alt="Generated ad visual"
                    className="w-full h-48 object-cover rounded-lg mb-4"
                    onError={(e) => {
                      const target = e.target as HTMLImageElement;
                      target.src = 'https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=800';
                    }}
                  />
                  
                  <h4 className="text-xl font-bold mb-2">{generatedAd.headline}</h4>
                  <p className="text-gray-700 mb-4">{generatedAd.copy}</p>
                  
                  <button className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg font-semibold hover:bg-blue-700 transition-colors">
                    {generatedAd.cta}
                  </button>
                </div>
              </div>

              {/* Performance Insights */}
              <div className="bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-sm border border-white/20 rounded-2xl p-6">
                <div className="flex items-center space-x-2 mb-4">
                  <BarChart3 className="h-5 w-5 text-primary-500" />
                  <h3 className="text-lg font-semibold text-primary-500">Performance Insights</h3>
                </div>
                
                <div className="grid grid-cols-2 gap-4 mb-6">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-emerald-500">{generatedAd.insights.engagement}</div>
                    <div className="text-sm text-gray-400">Predicted Engagement</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-sky-500">{generatedAd.insights.clickRate}</div>
                    <div className="text-sm text-gray-400">Expected CTR</div>
                  </div>
                </div>
                
                <div className="mb-4">
                  <div className="flex items-center space-x-2 mb-2">
                    <TrendingUp className="h-4 w-4 text-gray-400" />
                    <span className="text-sm text-gray-400">Trending Keywords</span>
                  </div>
                  <div className="flex flex-wrap gap-2">
                    {generatedAd.insights.trending.map((keyword) => (
                      <span key={keyword} className="px-3 py-1 bg-primary-500/20 text-primary-500 rounded-full text-sm">
                        {keyword}
                      </span>
                    ))}
                  </div>
                </div>

                <div>
                  <div className="text-sm text-gray-400 mb-2">AI Recommendations</div>
                  <ul className="space-y-1">
                    {generatedAd.insights.recommendations.map((rec, index) => (
                      <li key={index} className="text-sm text-gray-300 flex items-start space-x-2">
                        <span className="text-primary-500 mt-1">•</span>
                        <span>{rec}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            </motion.div>

            {/* Actions & Content */}
            <motion.div
              initial={{ opacity: 0, x: 50 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.4 }}
              className="space-y-6"
            >
              {/* Ad Copy Editor */}
              <div className="bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-sm border border-white/20 rounded-2xl p-6">
                <h3 className="text-lg font-semibold mb-4 text-primary-500">Ad Copy</h3>
                
                <div className="space-y-4">
                  <div>
                    <label className="text-sm text-gray-400 mb-2 block">Headline</label>
                    <div className="flex items-center space-x-2">
                      <input 
                        type="text" 
                        value={generatedAd.headline}
                        onChange={(e) => setGeneratedAd(prev => prev ? {...prev, headline: e.target.value} : null)}
                        className="flex-1 bg-white/5 border border-white/20 rounded-lg px-3 py-2 text-white focus:border-primary-500 focus:ring-2 focus:ring-primary-500/20 transition-all"
                      />
                      <button 
                        onClick={() => copyToClipboard(generatedAd.headline, 'Headline')}
                        className="p-2 bg-primary-500/20 hover:bg-primary-500/30 rounded-lg transition-colors"
                      >
                        <Copy className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                  
                  <div>
                    <label className="text-sm text-gray-400 mb-2 block">Body Copy</label>
                    <div className="flex items-start space-x-2">
                      <textarea 
                        value={generatedAd.copy}
                        onChange={(e) => setGeneratedAd(prev => prev ? {...prev, copy: e.target.value} : null)}
                        className="flex-1 bg-white/5 border border-white/20 rounded-lg px-3 py-2 text-white h-24 resize-none focus:border-primary-500 focus:ring-2 focus:ring-primary-500/20 transition-all"
                      />
                      <button 
                        onClick={() => copyToClipboard(generatedAd.copy, 'Body copy')}
                        className="p-2 bg-primary-500/20 hover:bg-primary-500/30 rounded-lg transition-colors"
                      >
                        <Copy className="h-4 w-4" />
                      </button>
                    </div>
                  </div>

                  <div>
                    <label className="text-sm text-gray-400 mb-2 block">Call to Action</label>
                    <div className="flex items-center space-x-2">
                      <input 
                        type="text" 
                        value={generatedAd.cta}
                        onChange={(e) => setGeneratedAd(prev => prev ? {...prev, cta: e.target.value} : null)}
                        className="flex-1 bg-white/5 border border-white/20 rounded-lg px-3 py-2 text-white focus:border-primary-500 focus:ring-2 focus:ring-primary-500/20 transition-all"
                      />
                      <button 
                        onClick={() => copyToClipboard(generatedAd.cta, 'CTA')}
                        className="p-2 bg-primary-500/20 hover:bg-primary-500/30 rounded-lg transition-colors"
                      >
                        <Copy className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                </div>
              </div>

              {/* Strategy Insights */}
              <div className="bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-sm border border-white/20 rounded-2xl p-6">
                <h3 className="text-lg font-semibold mb-4 text-primary-500">Marketing Strategy</h3>
                <p className="text-gray-300 text-sm leading-relaxed">{generatedAd.strategy}</p>
              </div>

              {/* Action Buttons */}
              <div className="space-y-4">
                <button
                  onClick={regenerateAd}
                  disabled={isGenerating}
                  className="w-full flex items-center justify-center space-x-2 px-6 py-3 bg-gradient-to-r from-violet-500 to-purple-500 text-white font-semibold rounded-lg hover:shadow-lg hover:shadow-violet-500/25 transition-all duration-200 disabled:opacity-50"
                >
                  <RefreshCw className={`h-5 w-5 ${isGenerating ? 'animate-spin' : ''}`} />
                  <span>{isGenerating ? 'Regenerating...' : 'Regenerate Ad'}</span>
                </button>
                
                <button 
                  onClick={downloadAssets}
                  className="w-full flex items-center justify-center space-x-2 px-6 py-3 bg-gradient-to-r from-emerald-500 to-green-500 text-white font-semibold rounded-lg hover:shadow-lg hover:shadow-emerald-500/25 transition-all duration-200"
                >
                  <Download className="h-5 w-5" />
                  <span>Download Assets</span>
                </button>
                
                <button 
                  onClick={() => {
                    setGeneratedAd(null);
                    setCurrentStep(1);
                    trackUserAction('new_ad_started');
                  }}
                  className="w-full px-6 py-3 bg-white/5 border border-white/20 text-white font-semibold rounded-lg hover:bg-white/10 transition-colors"
                >
                  Create New Ad
                </button>
              </div>
            </motion.div>
          </div>
        </div>
      </div>
    );
  }

  // Loading state
  if (isGenerating) {
    return (
      <div className="min-h-screen pt-20 flex items-center justify-center">
        <motion.div
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          className="text-center"
        >
          <div className="relative mb-8">
            <div className="w-32 h-32 bg-gradient-to-r from-primary-500 to-violet-500 rounded-full flex items-center justify-center mx-auto">
              <Loader2 className="h-16 w-16 text-white animate-spin" />
            </div>
            <div className="absolute inset-0 bg-gradient-to-r from-primary-500 to-violet-500 rounded-full blur-xl opacity-30 animate-pulse"></div>
          </div>
          
          <h2 className="text-3xl font-display font-bold mb-4 bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
            Crafting Your Perfect Ad
          </h2>
          <p className="text-xl text-gray-400 mb-8">
            Our AI is analyzing trends and generating compelling content...
          </p>
          
          <div className="flex items-center justify-center space-x-2 text-primary-500">
            <Sparkles className="h-5 w-5 animate-pulse" />
            <span>Generating amazing results</span>
            <Sparkles className="h-5 w-5 animate-pulse" />
          </div>
        </motion.div>
      </div>
    );
  }

  // Form steps
  return (
    <div className="min-h-screen pt-20 pb-12">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 50 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-12"
        >
          <h1 className="text-4xl md:text-5xl font-display font-bold mb-4 bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
            AI Ad Generator
          </h1>
          <p className="text-xl text-gray-400">
            Tell us about your business and we'll create the perfect ad
          </p>
        </motion.div>

        {/* Progress Bar */}
        <div className="mb-12">
          <div className="flex items-center justify-between mb-4">
            <span className="text-sm text-gray-400">Step {currentStep} of {totalSteps}</span>
            <span className="text-sm text-gray-400">{Math.round((currentStep / totalSteps) * 100)}% Complete</span>
          </div>
          <div className="w-full bg-white/10 rounded-full h-2">
            <motion.div
              className="bg-gradient-to-r from-primary-500 to-violet-500 h-2 rounded-full"
              initial={{ width: 0 }}
              animate={{ width: `${(currentStep / totalSteps) * 100}%` }}
              transition={{ duration: 0.5 }}
            />
          </div>
        </div>

        {/* Form Steps */}
        <AnimatePresence mode="wait">
          <motion.div
            key={currentStep}
            initial={{ opacity: 0, x: 50 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -50 }}
            transition={{ duration: 0.3 }}
            className="bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-sm border border-white/20 rounded-2xl p-8"
          >
            {currentStep === 1 && (
              <div className="space-y-6">
                <div className="flex items-center space-x-3 mb-6">
                  <Building2 className="h-8 w-8 text-primary-500" />
                  <h2 className="text-2xl font-semibold">Business Information</h2>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">
                      Business Name *
                    </label>
                    <input
                      type="text"
                      value={formData.businessName}
                      onChange={(e) => handleInputChange('businessName', e.target.value)}
                      className="w-full px-4 py-3 bg-white/5 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:border-primary-500 focus:ring-2 focus:ring-primary-500/20 transition-all"
                      placeholder="Enter your business name"
                      required
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">
                      Business Type
                    </label>
                    <select
                      value={formData.businessType}
                      onChange={(e) => handleInputChange('businessType', e.target.value)}
                      className="w-full px-4 py-3 bg-white/5 border border-white/20 rounded-lg text-white focus:border-primary-500 focus:ring-2 focus:ring-primary-500/20 transition-all"
                    >
                      <option value="">Select business type</option>
                      {businessTypes.map(type => (
                        <option key={type} value={type} className="bg-slate-800">{type}</option>
                      ))}
                    </select>
                  </div>
                </div>
              </div>
            )}

            {currentStep === 2 && (
              <div className="space-y-6">
                <div className="flex items-center space-x-3 mb-6">
                  <Package className="h-8 w-8 text-primary-500" />
                  <h2 className="text-2xl font-semibold">Product Details</h2>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Product/Service Name *
                  </label>
                  <input
                    type="text"
                    value={formData.productName}
                    onChange={(e) => handleInputChange('productName', e.target.value)}
                    className="w-full px-4 py-3 bg-white/5 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:border-primary-500 focus:ring-2 focus:ring-primary-500/20 transition-all"
                    placeholder="What are you advertising?"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Description
                  </label>
                  <textarea
                    value={formData.productDescription}
                    onChange={(e) => handleInputChange('productDescription', e.target.value)}
                    rows={4}
                    className="w-full px-4 py-3 bg-white/5 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:border-primary-500 focus:ring-2 focus:ring-primary-500/20 transition-all resize-none"
                    placeholder="Describe your product or service..."
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Target Audience *
                  </label>
                  <input
                    type="text"
                    value={formData.targetAudience}
                    onChange={(e) => handleInputChange('targetAudience', e.target.value)}
                    className="w-full px-4 py-3 bg-white/5 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:border-primary-500 focus:ring-2 focus:ring-primary-500/20 transition-all"
                    placeholder="Who is your ideal customer?"
                    required
                  />
                </div>
              </div>
            )}

            {currentStep === 3 && (
              <div className="space-y-6">
                <div className="flex items-center space-x-3 mb-6">
                  <Target className="h-8 w-8 text-primary-500" />
                  <h2 className="text-2xl font-semibold">Platform Selection</h2>
                </div>

                <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                  {platforms.map(platform => (
                    <motion.button
                      key={platform.name}
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      onClick={() => handleInputChange('platform', platform.name)}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        formData.platform === platform.name
                          ? 'border-primary-500 bg-primary-500/20'
                          : 'border-white/20 bg-white/5 hover:border-white/40'
                      }`}
                    >
                      <div className={`w-12 h-12 bg-gradient-to-r ${platform.color} rounded-lg mx-auto mb-2`}></div>
                      <div className="text-sm font-medium">{platform.name}</div>
                    </motion.button>
                  ))}
                </div>
              </div>
            )}

            {currentStep === 4 && (
              <div className="space-y-6">
                <div className="flex items-center space-x-3 mb-6">
                  <Palette className="h-8 w-8 text-primary-500" />
                  <h2 className="text-2xl font-semibold">Tone & Style</h2>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {tones.map(tone => (
                    <motion.button
                      key={tone.name}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => handleInputChange('tone', tone.name)}
                      className={`p-4 rounded-lg border-2 text-left transition-all ${
                        formData.tone === tone.name
                          ? 'border-primary-500 bg-primary-500/20'
                          : 'border-white/20 bg-white/5 hover:border-white/40'
                      }`}
                    >
                      <div className="font-medium mb-1">{tone.name}</div>
                      <div className="text-sm text-gray-400">{tone.desc}</div>
                    </motion.button>
                  ))}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Additional Information (Optional)
                  </label>
                  <textarea
                    value={formData.additionalInfo}
                    onChange={(e) => handleInputChange('additionalInfo', e.target.value)}
                    rows={3}
                    className="w-full px-4 py-3 bg-white/5 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:border-primary-500 focus:ring-2 focus:ring-primary-500/20 transition-all resize-none"
                    placeholder="Any specific requirements or preferences..."
                  />
                </div>
              </div>
            )}
          </motion.div>
        </AnimatePresence>

        {/* Navigation Buttons */}
        <div className="flex justify-between mt-8">
          <button
            onClick={prevStep}
            disabled={currentStep === 1}
            className={`flex items-center space-x-2 px-6 py-3 rounded-lg font-medium transition-all ${
              currentStep === 1
                ? 'bg-white/5 text-gray-500 cursor-not-allowed'
                : 'bg-white/10 text-white hover:bg-white/20'
            }`}
          >
            <ArrowLeft className="h-5 w-5" />
            <span>Previous</span>
          </button>

          {currentStep === totalSteps ? (
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={generateAd}
              disabled={isGenerating}
              className="flex items-center space-x-2 px-8 py-3 bg-gradient-to-r from-primary-500 to-violet-500 text-white font-semibold rounded-lg hover:shadow-lg hover:shadow-primary-500/25 transition-all duration-200 disabled:opacity-50"
            >
              <Sparkles className="h-5 w-5" />
              <span>{isGenerating ? 'Generating...' : 'Generate Ad'}</span>
            </motion.button>
          ) : (
            <button
              onClick={nextStep}
              className="flex items-center space-x-2 px-6 py-3 bg-gradient-to-r from-primary-500 to-violet-500 text-white font-semibold rounded-lg hover:shadow-lg hover:shadow-primary-500/25 transition-all duration-200"
            >
              <span>Next</span>
              <ArrowRight className="h-5 w-5" />
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

export default GeneratorPage;